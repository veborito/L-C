
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE EQUAL FLOAT INTEGER LPAREN MINUS MODULO PLUS PRINT RANGE RPAREN SQRT STRING TIMES VARstatement : VAR EQUAL expressionstatement : PRINT expressionstatement : RANGE INTEGER COMMA INTEGERstatement : SQRT expressionstatement : expressionexpression : expression PLUS term expression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : term MODULO factorterm : factorfactor : INTEGERfactor : FLOATfactor : LPAREN expression RPARENfactor : VAR'
    
_lr_action_items = {'VAR':([0,4,7,11,12,13,14,19,20,21,],[2,16,16,16,16,16,16,16,16,16,]),'PRINT':([0,],[4,]),'RANGE':([0,],[5,]),'SQRT':([0,],[7,]),'INTEGER':([0,4,5,7,11,12,13,14,19,20,21,26,],[6,6,17,6,6,6,6,6,6,6,6,31,]),'FLOAT':([0,4,7,11,12,13,14,19,20,21,],[10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,4,7,11,12,13,14,19,20,21,],[11,11,11,11,11,11,11,11,11,11,]),'$end':([1,2,3,6,8,9,10,15,16,18,23,24,25,27,28,29,30,31,],[0,-16,-5,-13,-8,-12,-14,-2,-16,-4,-1,-6,-7,-9,-10,-11,-15,-3,]),'EQUAL':([2,],[12,]),'TIMES':([2,6,8,9,10,16,24,25,27,28,29,30,],[-16,-13,19,-12,-14,-16,19,19,-9,-10,-11,-15,]),'DIVIDE':([2,6,8,9,10,16,24,25,27,28,29,30,],[-16,-13,20,-12,-14,-16,20,20,-9,-10,-11,-15,]),'MODULO':([2,6,8,9,10,16,24,25,27,28,29,30,],[-16,-13,21,-12,-14,-16,21,21,-9,-10,-11,-15,]),'PLUS':([2,3,6,8,9,10,15,16,18,22,23,24,25,27,28,29,30,],[-16,13,-13,-8,-12,-14,13,-16,13,13,13,-6,-7,-9,-10,-11,-15,]),'MINUS':([2,3,6,8,9,10,15,16,18,22,23,24,25,27,28,29,30,],[-16,14,-13,-8,-12,-14,14,-16,14,14,14,-6,-7,-9,-10,-11,-15,]),'RPAREN':([6,8,9,10,16,22,24,25,27,28,29,30,],[-13,-8,-12,-14,-16,30,-6,-7,-9,-10,-11,-15,]),'COMMA':([17,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,7,11,12,],[3,15,18,22,23,]),'term':([0,4,7,11,12,13,14,],[8,8,8,8,8,24,25,]),'factor':([0,4,7,11,12,13,14,19,20,21,],[9,9,9,9,9,9,9,27,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR EQUAL expression','statement',3,'p_statement_var','lazylang.py',62),
  ('statement -> PRINT expression','statement',2,'p_statement_print','lazylang.py',68),
  ('statement -> RANGE INTEGER COMMA INTEGER','statement',4,'p_statement_range','lazylang.py',74),
  ('statement -> SQRT expression','statement',2,'p_statement_sqrt','lazylang.py',83),
  ('statement -> expression','statement',1,'p_statement_expr','lazylang.py',87),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','lazylang.py',91),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','lazylang.py',95),
  ('expression -> term','expression',1,'p_expression_term','lazylang.py',99),
  ('term -> term TIMES factor','term',3,'p_term_times','lazylang.py',103),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','lazylang.py',107),
  ('term -> term MODULO factor','term',3,'p_term_modulo','lazylang.py',111),
  ('term -> factor','term',1,'p_term_factor','lazylang.py',115),
  ('factor -> INTEGER','factor',1,'p_factor_integer','lazylang.py',120),
  ('factor -> FLOAT','factor',1,'p_factor_float','lazylang.py',124),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expression','lazylang.py',128),
  ('factor -> VAR','factor',1,'p_factor_var','lazylang.py',132),
]
